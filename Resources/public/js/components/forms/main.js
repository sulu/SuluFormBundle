/**
 * Generated by https://github.com/alexander-schranz/sulu-backend-bundle.
 */

define(['suluform/model/form',
    'suluform/collections/forms'], function (Model,  Collection) {

    'use strict';

    var constants = {
        listContainerId: 'form-list-container',
        formContainerId: 'form-form-container',
        rootUrl: 'forms/',
        defaultTab: 'general',
        formModule: 'forms/form@suluform',
        listModule: 'forms/list@suluform'
    },

    namespace = 'sulu.form.forms.',

    /**
     * listens on and navigates to entity list
     * @event sulu.form.forms.list
     */
    NAVIGATE_LIST = function () {
        return createEventName.call(this, 'navigate-list');
    },

    /**
     * listens on and navigates to entity
     * @event sulu.form.forms.to
     */
    NAVIGATE_TO = function () {
        return createEventName.call(this, 'navigate-to');
    },

    /**
     * listens on and navigates to entity for adding
     * @event sulu.form.forms.add
     */
    NAVIGATE_ADD = function () {
        return createEventName.call(this, 'navigate-add');
    },

    /**
     * emitted after a entity got changed
     * @event sulu.form.forms.changed
     * @param {Object} the changed entity model
     */
    CHANGED = function () {
        return createEventName.call(this, 'changed');
    },

    /**
     * listens on and saves a entity
     * @event sulu.form.forms.save
     * @param {Object} the data of the entity to save
     */
    SAVE = function () {
        return createEventName.call(this, 'save');
    },

    /**
     * listens on and deletes entities
     * @event sulu.form.forms.delete
     * @param {Array} an array of ids of the entities to delete
     * @param {Function} function to execute after every deleted entities
     * @param {Function} function to execute after everything got deleted
     */
    DELETE = function () {
        return createEventName.call(this, 'delete');
    },

    /**
     * emited when a single entity got deleted
     * @event sulu.form.forms.deleted
     * @param {String|Number} the id of the deleted entity
     */
    DELETED = function () {
        return createEventName.call(this, 'deleted');
    },

    /** returns normalized event names */
    createEventName = function (postFix) {
        return namespace + postFix;
    };

    return {
        collection: new Collection(),
        language: null,

        /**
         * Initializes the component
         */
        initialize: function () {
            this.bindCustomEvents();
            this.render();
        },

        /**
         * Helper function to get a entity model
         * @param id {String|Number} id of the model
         * @returns {Object} the backbone model
         */
        getModel: function (id) {
            if (!!this.collection.get(id)) {
                return this.collection.get(id);
            } else {
                var model = new Model();
                if (!!id) {
                    model.set({id: id});
                }
                this.collection.push(model);
                return model;
            }
        },

        /**
         * Renderes the component
         */
        render: function () {
            if (this.options.display === 'list') {
                this.renderList(this.options.language);
            } else if (this.options.display === 'form') {
                this.renderForm(this.options.language);
            } else {
                throw 'display type wrong';
            }
        },

        /**
         * Binds custom related events
         */
        bindCustomEvents: function () {
            // language changed
            this.sandbox.on('sulu.header.language-changed', this.languageChanged.bind(this));
            // tab changed
            this.sandbox.on('husky.tabs.header.item.select', this.tabChanged.bind(this));
            // navigate to form list
            this.sandbox.on(NAVIGATE_LIST.call(this), this.navigateToList.bind(this));
            // navigate to form
            this.sandbox.on(NAVIGATE_TO.call(this), this.navigateTo.bind(this));
            // navigate to form for adding
            this.sandbox.on(NAVIGATE_ADD.call(this), this.navigateToAdd.bind(this));
            // save a form
            this.sandbox.on(SAVE.call(this), this.save.bind(this));
            // deletes more forms
            this.sandbox.on(DELETE.call(this), this.deleteCollections.bind(this));
        },

        /**
         * Saves data for an existing entity
         * @param data {Object} object with the data to update
         * @param callback {Function} callback to call if entity has been saved
         */
        save: function (data, callback) {
            var model = this.getModel(data.id);
            model.set(data);

            model.save(null, {
                success: function (result) {
                    this.sandbox.emit(CHANGED.call(this), result.toJSON());
                    callback(result.toJSON(), true);
                }.bind(this),
                error: function (result, response) {
                    this.sandbox.logger.log('Error while saving form');
                    callback(response.responseJSON, false);
                }.bind(this)
            });
        },

        /**
         * Deletes an more models
         * @param ids {Array} array of entity ids
         * @param callback {Function} callback to execute after a single entity got deleted
         * @param finishedCallback {Function} callback to execute after everything got deleted
         */
        deleteCollections: function (ids, callback, finishedCallback) {
            var model, count = 0;
            this.sandbox.sulu.showDeleteDialog(function (confirmed) {
                if (confirmed === true) {
                    this.sandbox.util.foreach(ids, function (id) {
                        model = this.getModel(id);
                        model.destroy({
                            success: function () {
                                if (typeof callback === 'function') {
                                    callback(id);
                                } else {
                                    this.sandbox.emit(DELETED.call(this), id);
                                }
                                count++;
                                if (count === ids.length && typeof finishedCallback === 'function') {
                                    finishedCallback();
                                }
                            }.bind(this),
                            error: function () {
                                this.sandbox.logger.log('Error while deleting a single form');
                            }.bind(this)
                        });
                    }.bind(this));
                }
            }.bind(this));
        },

        /**
         * Navigates to the entity list
         */
        navigateToList: function () {
            this.sandbox.emit('sulu.router.navigate', constants.rootUrl + this.options.language, true, true);
        },

        /**
         * Navigates to the entity form
         * @param id {Number|String} the id of the entity to edit
         * @param tab {String} the tab to route to
         */
        navigateTo: function (id, tab) {
            tab = (!!tab) ? tab : constants.defaultTab;
            this.sandbox.emit('sulu.router.navigate', constants.rootUrl + this.options.language + '/edit:' + id + '/' + tab, true, true);
        },

        /**
         * Navigates to the entity for adding a new entity
         * @param tab {String} the tab to route to
         */
        navigateToAdd: function (tab) {
            tab = (!!tab) ? tab : constants.defaultTab;
            var route = constants.rootUrl + this.options.language + '/add/' + tab;
            this.sandbox.emit('sulu.router.navigate', route, true, true);
        },

        /**
         * Renders the list-component
         * @param language {String} the locale in which the event gets loaded. can be undefined
         */
        renderList: function (language) {
            var $list = this.sandbox.dom.createElement('<div id="' + constants.listContainerId + '"/>');
            this.html($list);
            this.sandbox.start([
                {
                    name: constants.listModule,
                    options: {
                        el: $list,
                        language: language
                    }
                }
            ]);
        },

        /**
         * Renders the from for add and edit
         */
        renderForm: function (locale) {
            this.sandbox.stop('#' + constants.formContainerId);

            var model,
                action = function (data) {
                    this.sandbox.start([
                        {
                            name: constants.formModule,
                            options: {
                                el: $form,
                                data: data,
                                language: this.options.language,
                                activeTab: this.options.content
                            }
                        }
                    ]);
                }.bind(this),
                $form = this.sandbox.dom.createElement('<div id="' + constants.formContainerId + '"/>');

            this.html($form);

            model = this.getModel(this.options.id);

            if (!!locale) {
                model.set({locale: locale});
            }

            if (!!model.get('id')) {
                model.fetch({
                    data: {locale: locale},
                    success: function (result) {
                        action(result.toJSON());
                    }.bind(this),
                    error: function () {
                        this.sandbox.logger.log('Error while fetching a single form');
                    }.bind(this)
                });
            } else {
                action(model.toJSON());
            }
        },

        /**
         * Handles the language change
         * @param language {String}
         */
        languageChanged: function(language) {
            this.options.language = language.id;
            if (this.options.display === 'list') {
                this.navigateToList();
            } else if (this.options.display === 'form') {
                if (!!this.options.id) {
                    this.navigateTo(this.options.id, this.options.content);
                } else {
                    this.navigateToAdd(this.options.content);
                }
            } else {
                throw 'display type wrong';
            }
        },

        /**
         * Handles changed tab
         * @param tab {Object}
         */
        tabChanged: function(tab) {
            if (!!tab.componentOptions.content) {
                this.options.content = tab.componentOptions.content;
            }
        }
    };
});
